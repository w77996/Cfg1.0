<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qx.cfg.dao.WalletRecordMapper" >
  <resultMap id="BaseResultMap" type="com.qx.cfg.pojo.WalletRecord" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="record_sn" property="recordSn" jdbcType="VARCHAR" />
    <result column="to_uid" property="toUid" jdbcType="INTEGER" />
    <result column="to_open_id" property="toOpenId" jdbcType="VARCHAR" />
    <result column="from_uid" property="fromUid" jdbcType="INTEGER" />
    <result column="from_open_id" property="fromOpenId" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="money" property="money" jdbcType="INTEGER" />
    <result column="pay_type" property="payType" jdbcType="TINYINT" />
    <result column="pay_status" property="payStatus" jdbcType="TINYINT" />
    <result column="pay_time" property="payTime" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, record_sn, to_uid, to_open_id, from_uid, from_open_id, type, money, pay_type, 
    pay_status, pay_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from wallet_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from wallet_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qx.cfg.pojo.WalletRecord" >
    insert into wallet_record (id, record_sn, to_uid, 
      to_open_id, from_uid, from_open_id, 
      type, money, pay_type, 
      pay_status, pay_time)
    values (#{id,jdbcType=INTEGER}, #{recordSn,jdbcType=VARCHAR}, #{toUid,jdbcType=INTEGER}, 
      #{toOpenId,jdbcType=VARCHAR}, #{fromUid,jdbcType=INTEGER}, #{fromOpenId,jdbcType=VARCHAR}, 
      #{type,jdbcType=TINYINT}, #{money,jdbcType=INTEGER}, #{payType,jdbcType=TINYINT}, 
      #{payStatus,jdbcType=TINYINT}, #{payTime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qx.cfg.pojo.WalletRecord" >
    insert into wallet_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="recordSn != null" >
        record_sn,
      </if>
      <if test="toUid != null" >
        to_uid,
      </if>
      <if test="toOpenId != null" >
        to_open_id,
      </if>
      <if test="fromUid != null" >
        from_uid,
      </if>
      <if test="fromOpenId != null" >
        from_open_id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="payStatus != null" >
        pay_status,
      </if>
      <if test="payTime != null" >
        pay_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="recordSn != null" >
        #{recordSn,jdbcType=VARCHAR},
      </if>
      <if test="toUid != null" >
        #{toUid,jdbcType=INTEGER},
      </if>
      <if test="toOpenId != null" >
        #{toOpenId,jdbcType=VARCHAR},
      </if>
      <if test="fromUid != null" >
        #{fromUid,jdbcType=INTEGER},
      </if>
      <if test="fromOpenId != null" >
        #{fromOpenId,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="money != null" >
        #{money,jdbcType=INTEGER},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=TINYINT},
      </if>
      <if test="payStatus != null" >
        #{payStatus,jdbcType=TINYINT},
      </if>
      <if test="payTime != null" >
        #{payTime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qx.cfg.pojo.WalletRecord" >
    update wallet_record
    <set >
      <if test="recordSn != null" >
        record_sn = #{recordSn,jdbcType=VARCHAR},
      </if>
      <if test="toUid != null" >
        to_uid = #{toUid,jdbcType=INTEGER},
      </if>
      <if test="toOpenId != null" >
        to_open_id = #{toOpenId,jdbcType=VARCHAR},
      </if>
      <if test="fromUid != null" >
        from_uid = #{fromUid,jdbcType=INTEGER},
      </if>
      <if test="fromOpenId != null" >
        from_open_id = #{fromOpenId,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=INTEGER},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=TINYINT},
      </if>
      <if test="payStatus != null" >
        pay_status = #{payStatus,jdbcType=TINYINT},
      </if>
      <if test="payTime != null" >
        pay_time = #{payTime,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qx.cfg.pojo.WalletRecord" >
    update wallet_record
    set record_sn = #{recordSn,jdbcType=VARCHAR},
      to_uid = #{toUid,jdbcType=INTEGER},
      to_open_id = #{toOpenId,jdbcType=VARCHAR},
      from_uid = #{fromUid,jdbcType=INTEGER},
      from_open_id = #{fromOpenId,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      money = #{money,jdbcType=INTEGER},
      pay_type = #{payType,jdbcType=TINYINT},
      pay_status = #{payStatus,jdbcType=TINYINT},
      pay_time = #{payTime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>